/*
 *
 * {{ properCase name }} reducer
 *
 */

import Immutable from 'seamless-immutable';

export const Types = {
  GET_REQUEST: '{{ camelCase name }}/GET_REQUEST',
  GET_SUCCESS: '{{ camelCase name }}/GET_SUCCESS',
  GET_FAILURE: '{{ camelCase name }}/GET_FAILURE',
};

export const initialState = Immutable({
  data: [],
  loading: false,
  error: null,
});

export default function {{ camelCase name }}(state = initialState, action) {
  switch (action.type) {
    case DEFAULT_ACTION:
      return state;
    default:
      return state;
  }
}

export const Creators = {
  get{{ properCase name }}Request: ({ field1, field2 }) => ({
    type: Types.GET_REQUEST,
    payload: { field1, field2 },
  }),
  get{{ properCase name }}Success: data => ({
    type: Types.GET_SUCCESS,
    payload: data,
  }),
  get{{ properCase name }}Failure: error => ({
    type: Types.GET_FAILURE,
    payload: error,
  }),
};
